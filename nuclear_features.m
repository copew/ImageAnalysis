% Oct 2020: running nuclear features on NeoTango samples and commented out unused lines


%this is a total list for TransNeo biopsies
%image_list =[603283,603279,603271,603262,603269,603263,603257,603253,602994,603006,603245,603007,603055,602983,602976,602971,602962,602952,602958,602966,602945,602951,602942,602935,602927,602921,602915,593960,593708,593978,593971,593987,594006,594000,594017,594035,594044,594051,594060,594080,594088,594095,594105,594116,594110,595806,594137,597777,597768,597794,597800,597812,597820,597786,597830,597838,599803,599797,599831,599850,599813,604094,603952,604089,604098,604083,607165,603944,604078,604057,607166,604071,604077,603911,603919,604105,603925,603922,603928,603941,603904,604061,604066,604055,604047,603987,604045,603976,603982,603963,603970,603966,603956,619678,619884,619809,619942,619868,619556,619896,619937,619926,619922,619932,619916,619911,619533,619852,619863,619859,619842,619837,619832,619847,619583,619815,619803,619799,619793,619579,619571,619538,619550,619877,619539,619460,619954,619465,619470,619476,619483,619489,619503,619508,619496,619515,619527,625891,625322,625333,625338,626172,625865,626171,625876,625887,625895,625908,625911,619953,625916,626166,625923,625930,625936,625958,625946,625951,626018,626047,626102,626103,626160, 603288, 603298,603292, 619872, 619857, 619905];

%this is a list for NeoTango
% total list: 306077,306083,306088,306091,306095,306098,306101,306106,306109,306112,306115,346032,346040,346044,346050,345970,345976,346021,346025,346028,346029,383598,383609,383610,383615,383618,383623,383628,383637,383643,383647,383650,383654,383664,383669,383670,383673,383676,383677,383678,383686,383689,383692,383694,383792,383796,383799,383804,383826,383827,383830,383833,383935,383938,383945,383950,383952,383955,383958,383961,383969,383972,383975,383977,383980,383984,383987,383990,383993,383996,467270,384006,384009,384014,384017,467271,384022,384029,384061,384095,384098,384099,384102,467266,467267,384117,384120,384124,384127,467269,384133,384138,384141,384144,384147,384150,384153,384156,384158,384301,384175,384172,384169,384166,384235,384231,384228,384303,384218,384248,384245,384243,384238,384264,384306,384257,384255,385175,384308,384272,384269,384298,384296,385433,385436,385439,385442,385445,385448,385451,385454,385458,385463,385466,385469,385472,385473,385476,385479,385482,385485,385488,385492,385495,385496,385499,385502,385504,385507,385512,385515,385518,385521,385523,385526,385529,385532,385534,387339,387344,387347,387352,387355,387364,387366,387409,387412,387415,387418,387421,387424,387429,387432,387433,387437,387439,387442,387445,387449,387452,387455,387461,388111,388114,388117,388122,388125,388128,388133,388136,388141,388145,388146,388149,388154,388157,388160,388164,388167,388170,388172,388175,388177,388178,388183,388184,388187,388218,388193,388219,388196,388199,388202,388208,388213,388220,388223,388226,388229,388232,388362,388363,388366,388368,388371,388374,388377,388380,388383,388386,388390,388396,388400,388405,388408,388411,388513,388530,388533,388538,388541,388544,388547,388550,388553,388557,388560,388563,388567,388570,388573,388579,388582,388585,388589,393812,389455,389459,389462,389466,389469,389473,389476,389479,389485,389487,389489,389492,389495,389498,389503,389512,389515,389518,389520,389524,389541,389542,389544,389547,389550,389553,389565,389568,389571,389574,389579,390942,390945,390948,390951,390952,390955,390958,390963,390966,390973,390976,391000,391003,391004,391007,391010,391014,391017,391029,391031,391034,391035,391038,391042,391043,391046,391049,391053,391054,391057,391129,391163,391166,391228,391230,391234,391242,391248,391251,391255,391257,391260,391264,391426,391430,391431,391434,391437,391440,391443,392285,392289,392290,392293,392297,393819,392305,392308,392312,392318,392319,392322,392323,392329,392332,392339,392343,392347,392350,420174,392356,392366,392369,392372,392375,392378,392382,392384,392388,392391,392505,392659,392666,392667,392670,392673,392678,392681,392684,392719,392693,392696,392698,392701,392702,392705,392710,392713,392714,392722,392726,392729,392732,392735,392738,392743,393822,392748,392751,392754,392757,392760,392761,392764,392769,392772,392775,392778,392781,408041,408046,408047,408050,408051,408052,408058,408064,408067,408070,408073,408076,408079,408081,408085,408090,408093,408096,420176,408102,408105,408108,408111,408112,408115,408118,408121,408124,408127,408129,408132,408139,408141,408144,408149,420177,408155,408157,408160,408163,409508,409510,409515,409518,409520,409523,420178,409531,409534,409537,409539,409542,409548,409551,409554,409557,409560,409563,409566,409569,409572,409575,409580,409581,409584,409589,409591,409594,409596,409599,420180,409603,409606,409629,409614,409618,412065,412066,411528,411619,411521,411980,411978,412072,411531,411572,411568,411557,411694,411698,411703,420192,411712,411714,411717,411742,411744,411748,411750,411756,411757,411761,411776,411777,411791,419425,419428,419434,420197,419441,419444,419447,419448,419456,419459,419465,419468,419469,419471,419476,419479,419482,419488,419491,419495,419498,419501,419505,419508,430391,419518,419521,419526,419529,419533,419536,433637,419537,420692,445311,420773,445312,420778,445315,420784,420788,420791,420794,420797,445316,420803,420806,420809,420812,420815,420818,420820,420823,420827,420836,420839,420841,420844,420847,420850,420853,420856,420859,445320,445321,445322,420874,420877,431566,431573,431579,431582,431586,431589,431593,431594,431596,431601,431603,445323,445324,445325,431621,431660,431663,445333,431668,431671,431675,431679,445336,445337,445338,445340,445343,445344,445347,445349,445352,445355,442243,446162,445370,445372,445375,445378,444295,444301,444304,444343,444345,444347,444348,444351,444354,444357,444366,444378,444385,444402,444404,444406,444420,444430,444431,444437,444440,444442,444445,444448,444553,444556,444557,444704,383964,384030,388108,389463
%running first three as a test run - now done
% finished these before 383977 does not have fits file .need to check if there is a
% duplicate XXXXXXXXXXXXXXX running the rest first
% 383977,
image_list=[383980,383984,383987,383990,383993,383996,467270,384006,384009,384014,384017,467271,384022,384029,384061,384095,384098,384099,384102,467266,467267,384117,384120,384124,384127,467269,384133,384138,384141,384144,384147,384150,384153,384156,384158,384301,384175,384172,384169,384166,384235,384231,384228,384303,384218,384248,384245,384243,384238,384264,384306,384257,384255,385175,384308,384272,384269,384298,384296,385433,385436,385439,385442,385445,385448,385451,385454,385458,385463,385466,385469,385472,385473,385476,385479,385482,385485,385488,385492,385495,385496,385499,385502,385504,385507,385512,385515,385518,385521,385523,385526,385529,385532,385534,387339,387344,387347,387352,387355,387364,387366,387409,387412,387415,387418,387421,387424,387429,387432,387433,387437,387439,387442,387445,387449,387452,387455,387461,388111,388114,388117,388122,388125,388128,388133,388136,388141,388145,388146,388149,388154,388157,388160,388164,388167,388170,388172,388175,388177,388178,388183,388184,388187,388218,388193,388219,388196,388199,388202,388208,388213,388220,388223,388226,388229,388232,388362,388363,388366,388368,388371,388374,388377,388380,388383,388386,388390,388396,388400,388405,388408,388411,388513,388530,388533,388538,388541,388544,388547,388550,388553,388557,388560,388563,388567,388570,388573,388579,388582,388585,388589,393812,389455,389459,389462,389466,389469,389473,389476,389479,389485,389487,389489,389492,389495,389498,389503,389512,389515,389518,389520,389524,389541,389542,389544,389547,389550,389553,389565,389568,389571,389574,389579,390942,390945,390948,390951,390952,390955,390958,390963,390966,390973,390976,391000,391003,391004,391007,391010,391014,391017,391029,391031,391034,391035,391038,391042,391043,391046,391049,391053,391054,391057,391129,391163,391166,391228,391230,391234,391242,391248,391251,391255,391257,391260,391264,391426,391430,391431,391434,391437,391440,391443,392285,392289,392290,392293,392297,393819,392305,392308,392312,392318,392319,392322,392323,392329,392332,392339,392343,392347,392350,420174,392356,392366,392369,392372,392375,392378,392382,392384,392388,392391,392505,392659,392666,392667,392670,392673,392678,392681,392684,392719,392693,392696,392698,392701,392702,392705,392710,392713,392714,392722,392726,392729,392732,392735,392738,392743,393822,392748,392751,392754,392757,392760,392761,392764,392769,392772,392775,392778,392781,408041,408046,408047,408050,408051,408052,408058,408064,408067,408070,408073,408076,408079,408081,408085,408090,408093,408096,420176,408102,408105,408108,408111,408112,408115,408118,408121,408124,408127,408129,408132,408139,408141,408144,408149,420177,408155,408157,408160,408163,409508,409510,409515,409518,409520,409523,420178,409531,409534,409537,409539,409542,409548,409551,409554,409557,409560,409563,409566,409569,409572,409575,409580,409581,409584,409589,409591,409594,409596,409599,420180,409603,409606,409629,409614,409618,412065,412066,411528,411619,411521,411980,411978,412072,411531,411572,411568,411557,411694,411698,411703,420192,411712,411714,411717,411742,411744,411748,411750,411756,411757,411761,411776,411777,411791,419425,419428,419434,420197,419441,419444,419447,419448,419456,419459,419465,419468,419469,419471,419476,419479,419482,419488,419491,419495,419498,419501,419505,419508,430391,419518,419521,419526,419529,419533,419536,433637,419537,420692,445311,420773,445312,420778,445315,420784,420788,420791,420794,420797,445316,420803,420806,420809,420812,420815,420818,420820,420823,420827,420836,420839,420841,420844,420847,420850,420853,420856,420859,445320,445321,445322,420874,420877,431566,431573,431579,431582,431586,431589,431593,431594,431596,431601,431603,445323,445324,445325,431621,431660,431663,445333,431668,431671,431675,431679,445336,445337,445338,445340,445343,445344,445347,445349,445352,445355,442243,446162,445370,445372,445375,445378,444295,444301,444304,444343,444345,444347,444348,444351,444354,444357,444366,444378,444385,444402,444404,444406,444420,444430,444431,444437,444440,444442,444445,444448,444553,444556,444557,444704,383964,384030,388108,389463];


% this is for testing
%image_list = [603283];

for image = 1:size(image_list,2)
    image_filenumber = image_list(image);
    image_path_stem = '/Volumes/Wei/Neoadjuvant/neoadjuvant_level2/NeoTango Level 2/level2_catalogues';
    
    % loading files
    data = fitsread([image_path_stem '/' num2str(image_filenumber) '.fits'],'binarytable');
    info = fitsinfo([image_path_stem '/' num2str(image_filenumber) '.fits']);
    
    % create indexing
    %X_ind = 3;
    %Y_ind = 4;
    overlap = 22;
    s2n=61;
    cell_ind = 62;
    
    
    %trim data
    data_trimmed = data;
    
    
    %remove non cells
    for i = 1:size(data, 2)
        data_trimmed{i} = data_trimmed{i}(data{cell_ind}~=0);
    end
    %remove overlaps
    data_tmp = data_trimmed;
    for i = 1:size(data_trimmed, 2)
        data_trimmed{i} = data_trimmed{i}(data_tmp{overlap} =='F');
    end
    %remove low signal to noise ratio (set threshold at 1.3 - discussed with A Dariush)
    data_tmp = data_trimmed;
    for i = 1:size(data_trimmed, 2)
        data_trimmed{i} = data_trimmed{i}(data_tmp{s2n} >= 1.3);
    end
    
    % and combine tumour and normal
    data_trimmed{cell_ind}(data_trimmed{cell_ind} == 4) = 1;
    
    
    
    % so now data_trimmed is the array that we need
    
    %now removing column 58 (slide name), 53 & 52 (pixel:micron ratio), 22 (overlap), 21
    %(convexity)
    for j = 1:size(data_trimmed, 2)
        if isa(data_trimmed{j}, 'double')
            continue
        elseif isa(data_trimmed{j}, 'char')
            data_trimmed{j} = double(data_trimmed{j}); %now 'T' is 84 and 'F' is 70
            data_trimmed{j}(data_trimmed{j} == 84) = 1; %now 'T' is 1
            data_trimmed{j}(data_trimmed{j} == 70) = 0; % now 'F' is 0
        else
             data_trimmed{j} = cell2mat(data_trimmed{j});
             data_trimmed{j} = str2num(data_trimmed{j});
        end
        
    end
    
    %create subset
    data_trimmed_t = [];
    data_trimmed_l = [];
    data_trimmed_s = [];
    
    for i = 1:size(data_trimmed, 2)
        data_trimmed_t{i} = data_trimmed{i}(data_trimmed{cell_ind} == 1);
        data_trimmed_l{i} = data_trimmed{i}(data_trimmed{cell_ind} == 2);
        data_trimmed_s{i} = data_trimmed{i}(data_trimmed{cell_ind} == 3);
        
    end
    
    
    %rows will be as such:
    % %     mean = 1;
    % %     median=2;
    % %     min=3;
    % %     max=4;
    % %     stdev=5;
    % %     firstq=6;
    % %     thirdq=7;
    % %     iqr=8;
    
    
    summary_statistics_t = zeros(8, size(data_trimmed_t, 2));
    summary_statistics_l = zeros(8, size(data_trimmed_l, 2));
    summary_statistics_s = zeros(8, size(data_trimmed_s, 2));
    
    for k = 1:size(data_trimmed_t, 2)
        summary_statistics_t(1,k) = mean(data_trimmed_t{k});
        summary_statistics_t(2,k) = median(data_trimmed_t{k});
        summary_statistics_t(3,k) = min(data_trimmed_t{k});
        summary_statistics_t(4,k) = max(data_trimmed_t{k});
        summary_statistics_t(5,k) = std(data_trimmed_t{k});
        summary_statistics_t(6,k) = prctile(data_trimmed_t{k}, 25);
        summary_statistics_t(7,k) = prctile(data_trimmed_t{k}, 75);
        summary_statistics_t(8,k) = iqr(data_trimmed_t{k});
    end
    
    for k = 1:size(data_trimmed_l, 2)
        summary_statistics_l(1,k) = mean(data_trimmed_l{k});
        summary_statistics_l(2,k) = median(data_trimmed_l{k});
        summary_statistics_l(3,k) = min(data_trimmed_l{k});
        summary_statistics_l(4,k) = max(data_trimmed_l{k});
        summary_statistics_l(5,k) = std(data_trimmed_l{k});
        summary_statistics_l(6,k) = prctile(data_trimmed_l{k}, 25);
        summary_statistics_l(7,k) = prctile(data_trimmed_l{k}, 75);
        summary_statistics_l(8,k) = iqr(data_trimmed_l{k});
    end
    
    for k = 1:size(data_trimmed_s, 2)
        summary_statistics_s(1,k) = mean(data_trimmed_s{k});
        summary_statistics_s(2,k) = median(data_trimmed_s{k});
        summary_statistics_s(3,k) = min(data_trimmed_s{k});
        summary_statistics_s(4,k) = max(data_trimmed_s{k});
        summary_statistics_s(5,k) = std(data_trimmed_s{k});
        summary_statistics_s(6,k) = prctile(data_trimmed_s{k}, 25);
        summary_statistics_s(7,k) = prctile(data_trimmed_s{k}, 75);
        summary_statistics_s(8,k) = iqr(data_trimmed_s{k});
    end
 
  csvwrite(['/Volumes/Wei/Neoadjuvant/neoadjuvant_level2/NeoTango Level 2/summary_statistics_nuclear/' num2str(image_filenumber) '_ss_t.csv'], summary_statistics_t);
  csvwrite(['/Volumes/Wei/Neoadjuvant/neoadjuvant_level2/NeoTango Level 2/summary_statistics_nuclear/' num2str(image_filenumber) '_ss_l.csv'], summary_statistics_l);
  csvwrite(['/Volumes/Wei/Neoadjuvant/neoadjuvant_level2/NeoTango Level 2/summary_statistics_nuclear/' num2str(image_filenumber) '_ss_s.csv'], summary_statistics_s);
    
end
